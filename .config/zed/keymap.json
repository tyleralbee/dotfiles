// Rule of thumb - choose binds based on their CONTEXT:
//
// | MODIFIER | CONTEXT                 | IMPLICATION                                                | EXAMPLE CONTEXTS   |
// | -------- | ----------------------- | ---------------------------------------------------------- | ------------------ |
// | `super`  | SYSTEM  (e.g. Hyprland) | The bind will work regardless of which program is in focus | OS, window manager |
// | `alt`    | PROCESS (e.g. Zed)      | The program in focus will handle the bind                  | Application        |
// | `ctrl`   | THREAD  (e.g. Vim)      | A subprocess of the program in focus will handle the bind  | Plugin, website    |
//
// - Use `shift` in tandem with `super`, `alt`, or `ctrl` for related binds.
// - `shift` binds are less common and/or more impactful than those without.
//
// Examples:
//
// - Use Hyprland to focus an app with `super-a`; open a new instance of the app with `super-shift-a`
// - Use Zed to open a file with `alt-o`; open the file in a new window with `alt-shift-o`
// - Use Vim to scroll up with `ctrl-u`; scroll to the top of the file with `ctrl-shift-u`
//
// Deviate from this rule of thumb for ubiquitous binds:
//
// - `ctrl-c`: Copy
// - `ctrl-f`: Find
// - `ctrl-q`: Quit
// - `ctrl-t`: New Tab
// - `ctrl-v`: Paste
// - `ctrl-w`: Close
// - `ctrl-x`: Cut
// - `ctrl-z`: Undo
//
// Notable changes resulting from the above include, but are not limited to:
//
// - Vim motions (most importantly, `ctrl-w`)
// - Terminal binds (PROCESS binds should be on `alt` anyways)
//
// Non-compliant binds below are marked with üö©
// Binds to be removed are marked with üèÅ
// Binds to be implemented are marked with üöß
[
    {
        "bindings": {
            "alt-a": null, // Zed prefix key
            "ctrl-shift-c": null, // was: collaborator panel

            // Ensure ubiquitous keybinds aren't overridden by defaults
            "ctrl-c": null, // copy
            "ctrl-f": null, // find
            "ctrl-q": null, // quit
            "ctrl-t": null, // new tab
            "ctrl-v": null, // paste
            "ctrl-x": null, // cut
            "ctrl-z": null, // undo
            // "ctrl-w": null, // üöß need to rebind this in Vim and Terminal first

            // GUI navigation & view toggles
            "alt-,": ["task::Spawn", { "task_name": "Open settings" }],
            "alt-.": ["task::Spawn", { "task_name": "Open keymap" }],
            "alt-/": ["task::Spawn", { "task_name": "Open tasks" }],
            "alt-<": "zed::OpenDefaultSettings",
            "alt->": "zed::OpenDefaultKeymap",
            "alt-[": "workspace::ToggleLeftDock", // üèÅ
            "alt-]": "workspace::ToggleRightDock", // üèÅ
            "alt-h": "workspace::ActivatePaneLeft",
            "alt-l": "workspace::ActivatePaneRight",
            "alt-p": "file_finder::Toggle",
            "alt-shift-/": "vim::OpenDefaultKeymap",
            "alt-shift-a": "agent::ToggleFocus",
            "alt-shift-g": "git_panel::ToggleFocus",
            "alt-shift-h": "workspace::ToggleLeftDock",
            "alt-shift-l": "workspace::ToggleRightDock",
            "alt-shift-p": "command_palette::Toggle",
            "ctrl-shift-i": "workspace::ToggleBottomDock" // üö© should be `alt-shift-j`
        }
    },
    {
        "context": "Editor",
        "bindings": {
            "alt-a ctrl-r": "git::Restore",
            "alt-a ctrl-y": "editor::CopyFileName",
            "alt-f": "editor::Format",
            "alt-shift-r": "editor::RestartLanguageServer",

            // Re-assign ubiquitous keybinds their default values
            "ctrl-c": "editor::Copy", // vim default: return to normal mode
            "ctrl-f": "buffer_search::Deploy", // vim default: page down
            "ctrl-v": "editor::Paste", // vim default: visual block mode
            "ctrl-x": "editor::Cut", // vim default: decrement
            "ctrl-z": "editor::Undo"
            // - `ctrl-n`: New Window
            // - `ctrl-q`: Quit
            // - `ctrl-t`: New Tab
            // - `ctrl-w`: Close // üöß something is causing ctrl-w to be treated as the beginning of a chord
        }
    },
    // Navigate up/down in menus (command palette, file finder, code actions, completions)
    {
        "context": "CommandPalette || FileFinder",
        "bindings": {
            "alt-j": "menu::SelectNext",
            "alt-k": "menu::SelectPrevious",
            "alt-shift-j": "menu::SelectLast",
            "alt-shift-k": "menu::SelectFirst"
        }
    },
    {
        "context": "Editor && (showing_code_actions || showing_completions)",
        "bindings": {
            "alt-j": "editor::ContextMenuNext",
            "alt-k": "editor::ContextMenuPrevious",
            "alt-shift-j": "editor::ContextMenuLast",
            "alt-shift-k": "editor::ContextMenuFirst"
        }
    },

    // normal, visual, and insert mode
    {
        "context": "(VimControl || vim_mode == insert) && !menu",
        "bindings": {
            "alt-j": "editor::AddSelectionBelow",
            "alt-k": "editor::AddSelectionAbove",
            "alt-shift-i": "editor::SplitSelectionIntoLines",
            "alt-shift-j": "editor::MoveLineDown",
            "alt-shift-k": "editor::MoveLineUp",
            "alt-shift-s": "editor::SortLinesCaseInsensitive",
            "alt-shift-space": "editor::ToggleCodeActions",
            "alt-space": "editor::ShowCompletions"
        }
    },
    // normal & visual mode
    {
        "context": "VimControl && !menu",
        "bindings": {
            // vim-sneak
            "s": "vim::PushSneak",
            "shift-s": "vim::PushSneakBackward",

            // multiline find
            "f": [
                "vim::PushFindForward",
                { "before": false, "multiline": true }
            ],
            "shift-f": [
                "vim::PushFindBackward",
                { "after": false, "multiline": true }
            ],
            "shift-t": [
                "vim::PushFindBackward",
                { "after": true, "multiline": true }
            ],
            "t": ["vim::PushFindForward", { "before": true, "multiline": true }]
        }
    },
    // normal & visual mode when not waiting for another binding to trigger
    {
        "context": "VimControl && vim_mode != operator && !menu",
        "bindings": {
            // use space as leader
            "space": null,

            // enable subword navigation
            "w": "vim::NextSubwordStart",
            "b": "vim::PreviousSubwordStart",
            "e": "vim::NextSubwordEnd",
            "g e": "vim::PreviousSubwordEnd",

            // oil.nvim
            "-": [
                "task::Spawn",
                { "task_name": "oil", "reveal_target": "center" }
            ]
        }
    },
    // normal mode only
    {
        "context": "vim_mode == normal && !menu",
        "bindings": {
            // Use neovim's yank behavior: yank to end of line.
            "shift-y": ["workspace::SendKeystrokes", "y $"]
        }
    },
    // visual mode only
    {
        "context": "vim_mode == visual && !menu",
        "bindings": {
            // vim-surround
            "space s": "vim::PushAddSurrounds"
        }
    },
    // Jupyter Notebooks for TypeScript via Deno
    {
        "context": "Editor && jupyter && !ContextEditor",
        "bindings": {
            "alt-shift-backspace": "repl::ClearOutputs",
            "alt-shift-enter": "repl::Run"
        }
    },
    // Run `tofu fmt` to format Terraform files
    {
        "context": "Editor && (extension == tf || extension == tfvars)",
        "bindings": {
            "alt-f": [
                "task::Spawn",
                {
                    "task_name": "tofu fmt",
                    "reveal_target": "dock" // doesn't actually pull up the terminal on error
                    // "reveal_target": "center" // causes screen flicker, but does pull up the terminal
                }
            ]
        }
    },
    // Run `pg_format` to format SQL files
    {
        "context": "Editor && (extension == sql || extension == psql)",
        "bindings": {
            "alt-f": [
                "task::Spawn",
                {
                    "task_name": "pg_format",
                    "reveal_target": "dock" // doesn't actually pull up the terminal on error
                    // "reveal_target": "center" // causes screen flicker, but does pull up the terminal
                }
            ]
        }
    },
    // Markdown binds
    {
        "context": "Editor && (extension==md || extension==markdown || extension==mdx)",
        "bindings": {
            "alt-shift-v": "markdown::OpenPreviewToTheSide",
            
            // Implement Obsidian hotkeys in Zed for Markdown files

            // "ctrl-0": "editor:remove-heading"
            "ctrl-0": [
                "workspace::SendKeystrokes",
                "escape m m v : s / \\ ( ^ # * \\ s | ^ \\ s | ^ \\ ) / / enter escape ` m"
            ],
            // "ctrl-1": "editor:set-heading-1"
            "ctrl-1": [
                "workspace::SendKeystrokes",
                "escape m m v : s / \\ ( ^ # * \\ s | ^ \\ s | ^ \\ ) / # space / enter escape ` m"
            ],
            // "ctrl-2": "editor:set-heading-2"
            "ctrl-2": [
                "workspace::SendKeystrokes",
                "escape m m v : s / \\ ( ^ # * \\ s | ^ \\ s | ^ \\ ) / # # space / enter escape ` m"
            ],
            // "ctrl-3": "editor:set-heading-3"
            "ctrl-3": [
                "workspace::SendKeystrokes",
                "escape m m v : s / \\ ( ^ # * \\ s | ^ \\ s | ^ \\ ) / # # # space / enter escape ` m"
            ],
            // "ctrl-4": "editor:set-heading-4"
            "ctrl-4": [
                "workspace::SendKeystrokes",
                "escape m m v : s / \\ ( ^ # * \\ s | ^ \\ s | ^ \\ ) / # # # # space / enter escape ` m"
            ],
            // "ctrl-5": "editor:set-heading-5"
            "ctrl-5": [
                "workspace::SendKeystrokes",
                "escape m m v : s / \\ ( ^ # * \\ s | ^ \\ s | ^ \\ ) / # # # # # space / enter escape ` m"
            ],
            // "ctrl-6": "editor:set-heading-6"
            "ctrl-6": [
                "workspace::SendKeystrokes",
                "escape m m v : s / \\ ( ^ # * \\ s | ^ \\ s | ^ \\ ) / # # # # # # space / enter escape ` m"
            ],
            // "Insert code block" (needs improvement)
            "ctrl-~": [
                "workspace::SendKeystrokes",
                "escape i ` ` ` b a s h enter ` ` ` escape O"
            ],
            "ctrl-v": "editor::Paste"

            // TODO: Implement the rest of the keybindings
            //
            // "alt-/": "templater-obsidian:templates/template-info.md",
            // "alt-b": "editor:toggle-bullet-list",
            // "alt-c": "templater-obsidian:templates/template-task.md",
            // "alt-d": "insert-current-date",
            // "alt-enter": "templater-obsidian:jump-to-next-cursor-location",
            // "alt-g": "link-with-alias:create-link-with-alias",
            // "alt-i": "editor:toggle-italics",
            // "alt-m": "editor:toggle-inline-math",
            // "alt-n": "editor:toggle-numbered-list",
            // "alt-o": "link-with-alias:toggle-link-display-text",
            // "alt-s": "editor:toggle-source",
            // "alt-shift-d": "templater-obsidian:insert-templates/date.md",
            // "alt-shift-e": "open-with-default-app:show",
            // "alt-shift-m": "file-explorer:move-file",
            // "alt-shift-t": "templater-obsidian:templates/template-time.md",
            // "alt-shift-z": "editor:fold-all",
            // "alt-t": "insert-current-time",
            // "alt-w": "table-editor-obsidian:evaluate-formulas",
            // "alt-x": "templater-obsidian:templates/template-index.md",
            // "alt-y": "editor:toggle-highlight",
            // "alt-z": "editor:toggle-fold",
            // "ctrl-'": "mrj-jump-to-link:activate-jump-to-link",
            // "ctrl-`": "editor:toggle-code",
            // "ctrl-b": "editor:toggle-bold",
            // "ctrl-g": "editor:insert-link",
            // "ctrl-shift-c": "obsidian-tasks-plugin:toggle-done"
        }
    },
    // Markdown binds when in visual mode
    {
        "context": "Editor && (extension==md || extension==markdown || extension==mdx) && vim_mode==visual",
        "bindings": {
            // Wrap in code block (needs improvement)
            "ctrl-~": [
                "workspace::SendKeystrokes",
                "s ` a ` ` b a s h space escape d f ` o escape p f ` i enter ` ` escape b i backspace escape B i backspace escape V <"
            ]
        }
    }
]
